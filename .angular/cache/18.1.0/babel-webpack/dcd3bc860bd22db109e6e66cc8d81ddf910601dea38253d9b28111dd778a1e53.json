{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport ByteOrder from './byte-order.js';\nconst typeSizes = {\n  1: 1,\n  // BYTE\n  2: 1,\n  // ASCII\n  3: 2,\n  // SHORT\n  4: 4,\n  // LONG\n  5: 8,\n  // RATIONAL\n  7: 1,\n  // UNDEFINED\n  9: 4,\n  // SLONG\n  10: 8,\n  // SRATIONAL\n  13: 4 // IFD\n};\nconst tagTypes = {\n  'BYTE': 1,\n  'ASCII': 2,\n  'SHORT': 3,\n  'LONG': 4,\n  'RATIONAL': 5,\n  'UNDEFINED': 7,\n  'SLONG': 9,\n  'SRATIONAL': 10,\n  'IFD': 13\n};\nexport default {\n  getAsciiValue,\n  getByteAt,\n  getAsciiAt,\n  getShortAt,\n  getLongAt,\n  getRationalAt,\n  getUndefinedAt,\n  getSlongAt,\n  getSrationalAt,\n  getIfdPointerAt,\n  typeSizes,\n  tagTypes,\n  getTypeSize\n};\nfunction getAsciiValue(charArray) {\n  return charArray.map(charCode => String.fromCharCode(charCode));\n}\nfunction getByteAt(dataView, offset) {\n  return dataView.getUint8(offset);\n}\nfunction getAsciiAt(dataView, offset) {\n  return dataView.getUint8(offset);\n}\nfunction getShortAt(dataView, offset, byteOrder) {\n  return dataView.getUint16(offset, byteOrder === ByteOrder.LITTLE_ENDIAN);\n}\nfunction getLongAt(dataView, offset, byteOrder) {\n  return dataView.getUint32(offset, byteOrder === ByteOrder.LITTLE_ENDIAN);\n}\nfunction getRationalAt(dataView, offset, byteOrder) {\n  return [getLongAt(dataView, offset, byteOrder), getLongAt(dataView, offset + 4, byteOrder)];\n}\nfunction getUndefinedAt(dataView, offset) {\n  return getByteAt(dataView, offset);\n}\nfunction getSlongAt(dataView, offset, byteOrder) {\n  return dataView.getInt32(offset, byteOrder === ByteOrder.LITTLE_ENDIAN);\n}\nfunction getSrationalAt(dataView, offset, byteOrder) {\n  return [getSlongAt(dataView, offset, byteOrder), getSlongAt(dataView, offset + 4, byteOrder)];\n}\nfunction getIfdPointerAt(dataView, offset, byteOrder) {\n  return getLongAt(dataView, offset, byteOrder);\n}\nfunction getTypeSize(typeName) {\n  if (tagTypes[typeName] === undefined) {\n    throw new Error('No such type found.');\n  }\n  return typeSizes[tagTypes[typeName]];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}