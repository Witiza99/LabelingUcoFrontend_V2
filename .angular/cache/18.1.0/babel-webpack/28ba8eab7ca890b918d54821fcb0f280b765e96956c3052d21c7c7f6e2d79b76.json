{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport Types from './types.js';\nexport default {\n  read\n};\nfunction read(dataView, jfifDataOffset) {\n  const length = getLength(dataView, jfifDataOffset);\n  const thumbnailWidth = getThumbnailWidth(dataView, jfifDataOffset, length);\n  const thumbnailHeight = getThumbnailHeight(dataView, jfifDataOffset, length);\n  const tags = {\n    'JFIF Version': getVersion(dataView, jfifDataOffset, length),\n    'Resolution Unit': getResolutionUnit(dataView, jfifDataOffset, length),\n    'XResolution': getXResolution(dataView, jfifDataOffset, length),\n    'YResolution': getYResolution(dataView, jfifDataOffset, length),\n    'JFIF Thumbnail Width': thumbnailWidth,\n    'JFIF Thumbnail Height': thumbnailHeight\n  };\n  if (thumbnailWidth !== undefined && thumbnailHeight !== undefined) {\n    const thumbnail = getThumbnail(dataView, jfifDataOffset, 3 * thumbnailWidth.value * thumbnailHeight.value, length);\n    if (thumbnail) {\n      tags['JFIF Thumbnail'] = thumbnail;\n    }\n  }\n  for (const tagName in tags) {\n    if (tags[tagName] === undefined) {\n      delete tags[tagName];\n    }\n  }\n  return tags;\n}\nfunction getLength(dataView, jfifDataOffset) {\n  return Types.getShortAt(dataView, jfifDataOffset);\n}\nfunction getVersion(dataView, jfifDataOffset, length) {\n  const OFFSET = 7;\n  const SIZE = 2;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const majorVersion = Types.getByteAt(dataView, jfifDataOffset + OFFSET);\n  const minorVersion = Types.getByteAt(dataView, jfifDataOffset + OFFSET + 1);\n  return {\n    value: majorVersion * 0x100 + minorVersion,\n    description: majorVersion + '.' + minorVersion\n  };\n}\nfunction getResolutionUnit(dataView, jfifDataOffset, length) {\n  const OFFSET = 9;\n  const SIZE = 1;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, jfifDataOffset + OFFSET);\n  return {\n    value,\n    description: getResolutionUnitDescription(value)\n  };\n}\nfunction getResolutionUnitDescription(value) {\n  if (value === 0) {\n    return 'None';\n  }\n  if (value === 1) {\n    return 'inches';\n  }\n  if (value === 2) {\n    return 'cm';\n  }\n  return 'Unknown';\n}\nfunction getXResolution(dataView, jfifDataOffset, length) {\n  const OFFSET = 10;\n  const SIZE = 2;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getShortAt(dataView, jfifDataOffset + OFFSET);\n  return {\n    value,\n    description: '' + value\n  };\n}\nfunction getYResolution(dataView, jfifDataOffset, length) {\n  const OFFSET = 12;\n  const SIZE = 2;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getShortAt(dataView, jfifDataOffset + OFFSET);\n  return {\n    value,\n    description: '' + value\n  };\n}\nfunction getThumbnailWidth(dataView, jfifDataOffset, length) {\n  const OFFSET = 14;\n  const SIZE = 1;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, jfifDataOffset + OFFSET);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getThumbnailHeight(dataView, jfifDataOffset, length) {\n  const OFFSET = 15;\n  const SIZE = 1;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, jfifDataOffset + OFFSET);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getThumbnail(dataView, jfifDataOffset, thumbnailLength, length) {\n  const OFFSET = 16;\n  if (thumbnailLength === 0 || OFFSET + thumbnailLength > length) {\n    return undefined;\n  }\n  const value = dataView.buffer.slice(jfifDataOffset + OFFSET, jfifDataOffset + OFFSET + thumbnailLength);\n  return {\n    value,\n    description: '<24-bit RGB pixel data>'\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}