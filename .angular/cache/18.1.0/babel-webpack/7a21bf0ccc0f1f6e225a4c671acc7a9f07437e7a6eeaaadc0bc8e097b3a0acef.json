{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { getStringFromDataView } from './utils.js';\nexport const iccTags = {\n  'desc': {\n    'name': 'ICC Description'\n  },\n  'cprt': {\n    'name': 'ICC Copyright'\n  },\n  'dmdd': {\n    'name': 'ICC Device Model Description'\n  },\n  'vued': {\n    'name': 'ICC Viewing Conditions Description'\n  },\n  'dmnd': {\n    'name': 'ICC Device Manufacturer for Display'\n  },\n  'tech': {\n    'name': 'Technology'\n  }\n};\nexport const iccProfile = {\n  4: {\n    'name': 'Preferred CMM type',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4),\n    'description': value => value !== null ? toCompany(value) : ''\n  },\n  8: {\n    'name': 'Profile Version',\n    'value': (dataView, offset) => {\n      return dataView.getUint8(offset).toString(10) + '.' + (dataView.getUint8(offset + 1) >> 4).toString(10) + '.' + (dataView.getUint8(offset + 1) % 16).toString(10);\n    }\n  },\n  12: {\n    'name': 'Profile/Device class',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4),\n    'description': value => {\n      switch (value.toLowerCase()) {\n        case 'scnr':\n          return 'Input Device profile';\n        case 'mntr':\n          return 'Display Device profile';\n        case 'prtr':\n          return 'Output Device profile';\n        case 'link':\n          return 'DeviceLink profile';\n        case 'abst':\n          return 'Abstract profile';\n        case 'spac':\n          return 'ColorSpace profile';\n        case 'nmcl':\n          return 'NamedColor profile';\n        case 'cenc':\n          return 'ColorEncodingSpace profile';\n        case 'mid ':\n          return 'MultiplexIdentification profile';\n        case 'mlnk':\n          return 'MultiplexLink profile';\n        case 'mvis':\n          return 'MultiplexVisualization profile';\n        default:\n          return value;\n      }\n    }\n  },\n  16: {\n    'name': 'Color Space',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4)\n  },\n  20: {\n    'name': 'Connection Space',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4)\n  },\n  24: {\n    'name': 'ICC Profile Date',\n    'value': (dataView, offset) => parseDate(dataView, offset).toISOString()\n  },\n  36: {\n    'name': 'ICC Signature',\n    'value': (dataView, offset) => sliceToString(dataView.buffer.slice(offset, offset + 4))\n  },\n  40: {\n    'name': 'Primary Platform',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4),\n    'description': value => toCompany(value)\n  },\n  48: {\n    'name': 'Device Manufacturer',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4),\n    'description': value => toCompany(value)\n  },\n  52: {\n    'name': 'Device Model Number',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4)\n  },\n  64: {\n    'name': 'Rendering Intent',\n    'value': (dataView, offset) => dataView.getUint32(offset),\n    'description': value => {\n      switch (value) {\n        case 0:\n          return 'Perceptual';\n        case 1:\n          return 'Relative Colorimetric';\n        case 2:\n          return 'Saturation';\n        case 3:\n          return 'Absolute Colorimetric';\n        default:\n          return value;\n      }\n    }\n  },\n  80: {\n    'name': 'Profile Creator',\n    'value': (dataView, offset) => getStringFromDataView(dataView, offset, 4)\n  }\n};\nfunction parseDate(dataView, offset) {\n  const year = dataView.getUint16(offset);\n  const month = dataView.getUint16(offset + 2) - 1;\n  const day = dataView.getUint16(offset + 4);\n  const hours = dataView.getUint16(offset + 6);\n  const minutes = dataView.getUint16(offset + 8);\n  const seconds = dataView.getUint16(offset + 10);\n  return new Date(Date.UTC(year, month, day, hours, minutes, seconds));\n}\nfunction sliceToString(slice) {\n  return String.fromCharCode.apply(null, new Uint8Array(slice));\n}\nfunction toCompany(value) {\n  switch (value.toLowerCase()) {\n    case 'appl':\n      return 'Apple';\n    case 'adbe':\n      return 'Adobe';\n    case 'msft':\n      return 'Microsoft';\n    case 'sunw':\n      return 'Sun Microsystems';\n    case 'sgi':\n      return 'Silicon Graphics';\n    case 'tgnt':\n      return 'Taligent';\n    default:\n      return value;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}