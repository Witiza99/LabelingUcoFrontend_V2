{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { getStringValue } from './tag-names-utils.js';\nexport default {\n  'iptc': {\n    0x0100: {\n      'name': 'Model Version',\n      'description': value => {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0105: {\n      'name': 'Destination',\n      'repeatable': true\n    },\n    0x0114: {\n      'name': 'File Format',\n      'description': value => {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0116: {\n      'name': 'File Format Version',\n      'description': value => {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x011e: 'Service Identifier',\n    0x0128: 'Envelope Number',\n    0x0132: 'Product ID',\n    0x013c: 'Envelope Priority',\n    0x0146: {\n      'name': 'Date Sent',\n      'description': getCreationDate\n    },\n    0x0150: {\n      'name': 'Time Sent',\n      'description': getCreationTime\n    },\n    0x015a: {\n      'name': 'Coded Character Set',\n      'description': getEncodingName,\n      'encoding_name': getEncodingName\n    },\n    0x0164: 'UNO',\n    0x0178: {\n      'name': 'ARM Identifier',\n      'description': value => {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x017a: {\n      'name': 'ARM Version',\n      'description': value => {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0200: {\n      'name': 'Record Version',\n      'description': value => {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0203: 'Object Type Reference',\n    0x0204: 'Object Attribute Reference',\n    0x0205: 'Object Name',\n    0x0207: 'Edit Status',\n    0x0208: {\n      'name': 'Editorial Update',\n      'description': value => {\n        if (getStringValue(value) === '01') {\n          return 'Additional Language';\n        }\n        return 'Unknown';\n      }\n    },\n    0x020a: 'Urgency',\n    0x020c: {\n      'name': 'Subject Reference',\n      'repeatable': true,\n      'description': value => {\n        const parts = getStringValue(value).split(':');\n        return parts[2] + (parts[3] ? '/' + parts[3] : '') + (parts[4] ? '/' + parts[4] : '');\n      }\n    },\n    0x020f: 'Category',\n    0x0214: {\n      'name': 'Supplemental Category',\n      'repeatable': true\n    },\n    0x0216: 'Fixture Identifier',\n    0x0219: {\n      'name': 'Keywords',\n      'repeatable': true\n    },\n    0x021a: {\n      'name': 'Content Location Code',\n      'repeatable': true\n    },\n    0x021b: {\n      'name': 'Content Location Name',\n      'repeatable': true\n    },\n    0x021e: 'Release Date',\n    0x0223: 'Release Time',\n    0x0225: 'Expiration Date',\n    0x0226: 'Expiration Time',\n    0x0228: 'Special Instructions',\n    0x022a: {\n      'name': 'Action Advised',\n      'description': value => {\n        const string = getStringValue(value);\n        if (string === '01') {\n          return 'Object Kill';\n        } else if (string === '02') {\n          return 'Object Replace';\n        } else if (string === '03') {\n          return 'Object Append';\n        } else if (string === '04') {\n          return 'Object Reference';\n        }\n        return 'Unknown';\n      }\n    },\n    0x022d: {\n      'name': 'Reference Service',\n      'repeatable': true\n    },\n    0x022f: {\n      'name': 'Reference Date',\n      'repeatable': true\n    },\n    0x0232: {\n      'name': 'Reference Number',\n      'repeatable': true\n    },\n    0x0237: {\n      'name': 'Date Created',\n      'description': getCreationDate\n    },\n    0x023c: {\n      'name': 'Time Created',\n      'description': getCreationTime\n    },\n    0x023e: {\n      'name': 'Digital Creation Date',\n      'description': getCreationDate\n    },\n    0x023f: {\n      'name': 'Digital Creation Time',\n      'description': getCreationTime\n    },\n    0x0241: 'Originating Program',\n    0x0246: 'Program Version',\n    0x024b: {\n      'name': 'Object Cycle',\n      'description': value => {\n        const string = getStringValue(value);\n        if (string === 'a') {\n          return 'morning';\n        } else if (string === 'p') {\n          return 'evening';\n        } else if (string === 'b') {\n          return 'both';\n        }\n        return 'Unknown';\n      }\n    },\n    0x0250: {\n      'name': 'By-line',\n      'repeatable': true\n    },\n    0x0255: {\n      'name': 'By-line Title',\n      'repeatable': true\n    },\n    0x025a: 'City',\n    0x025c: 'Sub-location',\n    0x025f: 'Province/State',\n    0x0264: 'Country/Primary Location Code',\n    0x0265: 'Country/Primary Location Name',\n    0x0267: 'Original Transmission Reference',\n    0x0269: 'Headline',\n    0x026e: 'Credit',\n    0x0273: 'Source',\n    0x0274: 'Copyright Notice',\n    0x0276: {\n      'name': 'Contact',\n      'repeatable': true\n    },\n    0x0278: 'Caption/Abstract',\n    0x027a: {\n      'name': 'Writer/Editor',\n      'repeatable': true\n    },\n    0x027d: {\n      'name': 'Rasterized Caption',\n      'description': value => value\n    },\n    0x0282: 'Image Type',\n    0x0283: {\n      'name': 'Image Orientation',\n      'description': value => {\n        const string = getStringValue(value);\n        if (string === 'P') {\n          return 'Portrait';\n        } else if (string === 'L') {\n          return 'Landscape';\n        } else if (string === 'S') {\n          return 'Square';\n        }\n        return 'Unknown';\n      }\n    },\n    0x0287: 'Language Identifier',\n    0x0296: {\n      'name': 'Audio Type',\n      'description': value => {\n        const stringValue = getStringValue(value);\n        const character0 = stringValue.charAt(0);\n        const character1 = stringValue.charAt(1);\n        let description = '';\n        if (character0 === '1') {\n          description += 'Mono';\n        } else if (character0 === '2') {\n          description += 'Stereo';\n        }\n        if (character1 === 'A') {\n          description += ', actuality';\n        } else if (character1 === 'C') {\n          description += ', question and answer session';\n        } else if (character1 === 'M') {\n          description += ', music, transmitted by itself';\n        } else if (character1 === 'Q') {\n          description += ', response to a question';\n        } else if (character1 === 'R') {\n          description += ', raw sound';\n        } else if (character1 === 'S') {\n          description += ', scener';\n        } else if (character1 === 'V') {\n          description += ', voicer';\n        } else if (character1 === 'W') {\n          description += ', wrap';\n        }\n        if (description !== '') {\n          return description;\n        }\n        return stringValue;\n      }\n    },\n    0x0297: {\n      'name': 'Audio Sampling Rate',\n      'description': value => parseInt(getStringValue(value), 10) + ' Hz'\n    },\n    0x0298: {\n      'name': 'Audio Sampling Resolution',\n      'description': value => {\n        const bits = parseInt(getStringValue(value), 10);\n        return bits + (bits === 1 ? ' bit' : ' bits');\n      }\n    },\n    0x0299: {\n      'name': 'Audio Duration',\n      'description': value => {\n        const duration = getStringValue(value);\n        if (duration.length >= 6) {\n          return duration.substr(0, 2) + ':' + duration.substr(2, 2) + ':' + duration.substr(4, 2);\n        }\n        return duration;\n      }\n    },\n    0x029a: 'Audio Outcue',\n    0x02ba: 'Short Document ID',\n    0x02bb: 'Unique Document ID',\n    0x02bc: 'Owner ID',\n    0x02c8: {\n      'name': value => {\n        if (value.length === 2) {\n          return 'ObjectData Preview File Format';\n        }\n        return 'Record 2 destination';\n      },\n      'description': value => {\n        if (value.length === 2) {\n          const intValue = (value[0] << 8) + value[1];\n          if (intValue === 0) {\n            return 'No ObjectData';\n          } else if (intValue === 1) {\n            return 'IPTC-NAA Digital Newsphoto Parameter Record';\n          } else if (intValue === 2) {\n            return 'IPTC7901 Recommended Message Format';\n          } else if (intValue === 3) {\n            return 'Tagged Image File Format (Adobe/Aldus Image data)';\n          } else if (intValue === 4) {\n            return 'Illustrator (Adobe Graphics data)';\n          } else if (intValue === 5) {\n            return 'AppleSingle (Apple Computer Inc)';\n          } else if (intValue === 6) {\n            return 'NAA 89-3 (ANPA 1312)';\n          } else if (intValue === 7) {\n            return 'MacBinary II';\n          } else if (intValue === 8) {\n            return 'IPTC Unstructured Character Oriented File Format (UCOFF)';\n          } else if (intValue === 9) {\n            return 'United Press International ANPA 1312 variant';\n          } else if (intValue === 10) {\n            return 'United Press International Down-Load Message';\n          } else if (intValue === 11) {\n            return 'JPEG File Interchange (JFIF)';\n          } else if (intValue === 12) {\n            return 'Photo-CD Image-Pac (Eastman Kodak)';\n          } else if (intValue === 13) {\n            return 'Microsoft Bit Mapped Graphics File [*.BMP]';\n          } else if (intValue === 14) {\n            return 'Digital Audio File [*.WAV] (Microsoft & Creative Labs)';\n          } else if (intValue === 15) {\n            return 'Audio plus Moving Video [*.AVI] (Microsoft)';\n          } else if (intValue === 16) {\n            return 'PC DOS/Windows Executable Files [*.COM][*.EXE]';\n          } else if (intValue === 17) {\n            return 'Compressed Binary File [*.ZIP] (PKWare Inc)';\n          } else if (intValue === 18) {\n            return 'Audio Interchange File Format AIFF (Apple Computer Inc)';\n          } else if (intValue === 19) {\n            return 'RIFF Wave (Microsoft Corporation)';\n          } else if (intValue === 20) {\n            return 'Freehand (Macromedia/Aldus)';\n          } else if (intValue === 21) {\n            return 'Hypertext Markup Language \"HTML\" (The Internet Society)';\n          } else if (intValue === 22) {\n            return 'MPEG 2 Audio Layer 2 (Musicom), ISO/IEC';\n          } else if (intValue === 23) {\n            return 'MPEG 2 Audio Layer 3, ISO/IEC';\n          } else if (intValue === 24) {\n            return 'Portable Document File (*.PDF) Adobe';\n          } else if (intValue === 25) {\n            return 'News Industry Text Format (NITF)';\n          } else if (intValue === 26) {\n            return 'Tape Archive (*.TAR)';\n          } else if (intValue === 27) {\n            return 'Tidningarnas Telegrambyrå NITF version (TTNITF DTD)';\n          } else if (intValue === 28) {\n            return 'Ritzaus Bureau NITF version (RBNITF DTD)';\n          } else if (intValue === 29) {\n            return 'Corel Draw [*.CDR]';\n          }\n          return `Unknown format ${intValue}`;\n        }\n        return getStringValue(value);\n      }\n    },\n    0x02c9: {\n      'name': 'ObjectData Preview File Format Version',\n      'description': (value, tags) => {\n        // Format ID, Version ID, Version Description\n        const formatVersions = {\n          '00': {\n            '00': '1'\n          },\n          '01': {\n            '01': '1',\n            '02': '2',\n            '03': '3',\n            '04': '4'\n          },\n          '02': {\n            '04': '4'\n          },\n          '03': {\n            '01': '5.0',\n            '02': '6.0'\n          },\n          '04': {\n            '01': '1.40'\n          },\n          '05': {\n            '01': '2'\n          },\n          '06': {\n            '01': '1'\n          },\n          '11': {\n            '01': '1.02'\n          },\n          '20': {\n            '01': '3.1',\n            '02': '4.0',\n            '03': '5.0',\n            '04': '5.5'\n          },\n          '21': {\n            '02': '2.0'\n          }\n        };\n        const stringValue = getStringValue(value);\n        if (tags['ObjectData Preview File Format']) {\n          const objectDataPreviewFileFormat = getStringValue(tags['ObjectData Preview File Format'].value);\n          if (formatVersions[objectDataPreviewFileFormat] && formatVersions[objectDataPreviewFileFormat][stringValue]) {\n            return formatVersions[objectDataPreviewFileFormat][stringValue];\n          }\n        }\n        return stringValue;\n      }\n    },\n    0x02ca: 'ObjectData Preview Data',\n    0x070a: {\n      'name': 'Size Mode',\n      'description': value => {\n        return value[0].toString();\n      }\n    },\n    0x0714: {\n      'name': 'Max Subfile Size',\n      'description': value => {\n        let n = 0;\n        for (let i = 0; i < value.length; i++) {\n          n = (n << 8) + value[i];\n        }\n        return n.toString();\n      }\n    },\n    0x075a: {\n      'name': 'ObjectData Size Announced',\n      'description': value => {\n        let n = 0;\n        for (let i = 0; i < value.length; i++) {\n          n = (n << 8) + value[i];\n        }\n        return n.toString();\n      }\n    },\n    0x075f: {\n      'name': 'Maximum ObjectData Size',\n      'description': value => {\n        let n = 0;\n        for (let i = 0; i < value.length; i++) {\n          n = (n << 8) + value[i];\n        }\n        return n.toString();\n      }\n    }\n  }\n};\nfunction getCreationDate(value) {\n  const date = getStringValue(value);\n  if (date.length >= 8) {\n    return date.substr(0, 4) + '-' + date.substr(4, 2) + '-' + date.substr(6, 2);\n  }\n  return date;\n}\nfunction getCreationTime(value) {\n  const time = getStringValue(value);\n  let parsedTime = time;\n  if (time.length >= 6) {\n    parsedTime = time.substr(0, 2) + ':' + time.substr(2, 2) + ':' + time.substr(4, 2);\n    if (time.length === 11) {\n      parsedTime += time.substr(6, 1) + time.substr(7, 2) + ':' + time.substr(9, 2);\n    }\n  }\n  return parsedTime;\n}\nfunction getEncodingName(value) {\n  const string = getStringValue(value);\n  if (string === '\\x1b%G') {\n    return 'UTF-8';\n  } else if (string === '\\x1b%5') {\n    return 'Windows-1252';\n  } else if (string === '\\x1b%/G') {\n    return 'UTF-8 Level 1';\n  } else if (string === '\\x1b%/H') {\n    return 'UTF-8 Level 2';\n  } else if (string === '\\x1b%/I') {\n    return 'UTF-8 Level 3';\n  } else if (string === '\\x1B/A') {\n    return 'ISO-8859-1';\n  } else if (string === '\\x1B/B') {\n    return 'ISO-8859-2';\n  } else if (string === '\\x1B/C') {\n    return 'ISO-8859-3';\n  } else if (string === '\\x1B/D') {\n    return 'ISO-8859-4';\n  } else if (string === '\\x1B/@') {\n    return 'ISO-8859-5';\n  } else if (string === '\\x1B/G') {\n    return 'ISO-8859-6';\n  } else if (string === '\\x1B/F') {\n    return 'ISO-8859-7';\n  } else if (string === '\\x1B/H') {\n    return 'ISO-8859-8';\n  }\n  return 'Unknown';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}