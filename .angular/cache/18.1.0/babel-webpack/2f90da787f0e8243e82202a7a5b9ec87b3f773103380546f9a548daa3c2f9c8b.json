{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { objectAssign } from './utils.js';\nimport ByteOrder from './byte-order.js';\nimport { IFD_TYPE_0TH, IFD_TYPE_EXIF, IFD_TYPE_GPS, IFD_TYPE_INTEROPERABILITY } from './tag-names.js';\nimport { readIfd, get0thIfdOffset } from './tags-helpers.js';\nconst EXIF_IFD_POINTER_KEY = 'Exif IFD Pointer';\nconst GPS_INFO_IFD_POINTER_KEY = 'GPS Info IFD Pointer';\nconst INTEROPERABILITY_IFD_POINTER_KEY = 'Interoperability IFD Pointer';\nexport default {\n  read\n};\nfunction read(dataView, tiffHeaderOffset, includeUnknown) {\n  const byteOrder = ByteOrder.getByteOrder(dataView, tiffHeaderOffset);\n  let tags = read0thIfd(dataView, tiffHeaderOffset, byteOrder, includeUnknown);\n  tags = readExifIfd(tags, dataView, tiffHeaderOffset, byteOrder, includeUnknown);\n  tags = readGpsIfd(tags, dataView, tiffHeaderOffset, byteOrder, includeUnknown);\n  tags = readInteroperabilityIfd(tags, dataView, tiffHeaderOffset, byteOrder, includeUnknown);\n  return tags;\n}\nfunction read0thIfd(dataView, tiffHeaderOffset, byteOrder, includeUnknown) {\n  return readIfd(dataView, IFD_TYPE_0TH, tiffHeaderOffset, get0thIfdOffset(dataView, tiffHeaderOffset, byteOrder), byteOrder, includeUnknown);\n}\nfunction readExifIfd(tags, dataView, tiffHeaderOffset, byteOrder, includeUnknown) {\n  if (tags[EXIF_IFD_POINTER_KEY] !== undefined) {\n    return objectAssign(tags, readIfd(dataView, IFD_TYPE_EXIF, tiffHeaderOffset, tiffHeaderOffset + tags[EXIF_IFD_POINTER_KEY].value, byteOrder, includeUnknown));\n  }\n  return tags;\n}\nfunction readGpsIfd(tags, dataView, tiffHeaderOffset, byteOrder, includeUnknown) {\n  if (tags[GPS_INFO_IFD_POINTER_KEY] !== undefined) {\n    return objectAssign(tags, readIfd(dataView, IFD_TYPE_GPS, tiffHeaderOffset, tiffHeaderOffset + tags[GPS_INFO_IFD_POINTER_KEY].value, byteOrder, includeUnknown));\n  }\n  return tags;\n}\nfunction readInteroperabilityIfd(tags, dataView, tiffHeaderOffset, byteOrder, includeUnknown) {\n  if (tags[INTEROPERABILITY_IFD_POINTER_KEY] !== undefined) {\n    return objectAssign(tags, readIfd(dataView, IFD_TYPE_INTEROPERABILITY, tiffHeaderOffset, tiffHeaderOffset + tags[INTEROPERABILITY_IFD_POINTER_KEY].value, byteOrder, includeUnknown));\n  }\n  return tags;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}