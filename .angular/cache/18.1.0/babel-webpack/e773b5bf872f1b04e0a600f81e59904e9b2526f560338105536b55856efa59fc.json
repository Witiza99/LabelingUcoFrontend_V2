{"ast":null,"code":"import { get64BitValue } from './image-header-iso-bmff-utils.js';\nexport function parseItemLocationBox(dataView, version, contentOffset, boxLength) {\n  const FLAGS_SIZE = 3;\n  const {\n    offsets,\n    sizes\n  } = getItemLocationBoxOffsetsAndSizes(version, contentOffset + FLAGS_SIZE);\n  const offsetSize = dataView.getUint8(offsets.offsetSize) >> 4;\n  sizes.item.extent.extentOffset = offsetSize;\n  const lengthSize = dataView.getUint8(offsets.lengthSize) & 0x0f;\n  sizes.item.extent.extentLength = lengthSize;\n  const baseOffsetSize = dataView.getUint8(offsets.baseOffsetSize) >> 4;\n  sizes.item.baseOffset = baseOffsetSize;\n  const indexSize = getIndexSize(dataView, offsets.indexSize, version);\n  sizes.item.extent.extentIndex = indexSize !== undefined ? indexSize : 0;\n  const itemCount = getItemCount(dataView, offsets.itemCount, version);\n  return {\n    type: 'iloc',\n    items: getItems(dataView, version, offsets, sizes, offsetSize, lengthSize, indexSize, itemCount),\n    length: boxLength\n  };\n}\nfunction getItemLocationBoxOffsetsAndSizes(version, contentOffset) {\n  const sizes = {\n    item: {\n      dataReferenceIndex: 2,\n      extentCount: 2,\n      extent: {}\n    }\n  };\n  if (version < 2) {\n    sizes.itemCount = 2;\n    sizes.item.itemId = 2;\n  } else if (version === 2) {\n    sizes.itemCount = 4;\n    sizes.item.itemId = 4;\n  }\n  if (version === 1 || version === 2) {\n    sizes.item.constructionMethod = 2;\n  } else {\n    sizes.item.constructionMethod = 0;\n  }\n  const offsets = {\n    offsetSize: contentOffset,\n    lengthSize: contentOffset,\n    baseOffsetSize: contentOffset + 1,\n    indexSize: contentOffset + 1\n  };\n  offsets.itemCount = contentOffset + 2;\n  offsets.items = offsets.itemCount + sizes.itemCount;\n  offsets.item = {\n    itemId: 0\n  };\n  offsets.item.constructionMethod = offsets.item.itemId + sizes.item.itemId;\n  offsets.item.dataReferenceIndex = offsets.item.constructionMethod + sizes.item.constructionMethod;\n  return {\n    offsets,\n    sizes\n  };\n}\nfunction getIndexSize(dataView, offset, version) {\n  if (version === 1 || version === 2) {\n    return dataView.getUint8(offset) & 0x0f;\n  }\n  return undefined;\n}\nfunction getItemCount(dataView, offset, version) {\n  if (version < 2) {\n    return dataView.getUint16(offset);\n  } else if (version === 2) {\n    return dataView.getUint32(offset);\n  }\n  return undefined;\n}\nfunction getItems(dataView, version, offsets, sizes, offsetSize, lengthSize, indexSize, itemCount) {\n  if (itemCount === undefined) {\n    return [];\n  }\n  const items = [];\n  let offset = offsets.items;\n  for (let i = 0; i < itemCount; i++) {\n    const item = {\n      extents: []\n    };\n    item.itemId = getItemId(dataView, offset, version);\n    offset += sizes.item.itemId;\n    item.constructionMethod = version === 1 || version === 2 ? dataView.getUint16(offset) & 0x0f : undefined;\n    offset += sizes.item.constructionMethod;\n    item.dataReferenceIndex = dataView.getUint16(offset);\n    offset += sizes.item.dataReferenceIndex;\n    item.baseOffset = getVariableSizedValue(dataView, offset, sizes.item.baseOffset);\n    offset += sizes.item.baseOffset;\n    item.extentCount = dataView.getUint16(offset);\n    offset += sizes.item.extentCount;\n    for (let j = 0; j < item.extentCount; j++) {\n      const extent = {};\n      extent.extentIndex = getExtentIndex(dataView, version, offset, indexSize);\n      offset += sizes.item.extent.extentIndex;\n      extent.extentOffset = getVariableSizedValue(dataView, offset, offsetSize);\n      offset += sizes.item.extent.extentOffset;\n      extent.extentLength = getVariableSizedValue(dataView, offset, lengthSize);\n      offset += sizes.item.extent.extentLength;\n      item.extents.push(extent);\n    }\n    items.push(item);\n  }\n  return items;\n}\nfunction getItemId(dataView, offset, version) {\n  if (version < 2) {\n    return dataView.getUint16(offset);\n  } else if (version === 2) {\n    return dataView.getUint32(offset);\n  }\n  return undefined;\n}\nfunction getExtentIndex(dataView, version, offset, indexSize) {\n  if ((version === 1 || version === 2) && indexSize > 0) {\n    return getVariableSizedValue(dataView, offset, indexSize);\n  }\n  return undefined;\n}\nfunction getVariableSizedValue(dataView, offset, size) {\n  if (size === 4) {\n    return dataView.getUint32(offset);\n  }\n  if (size === 8) {\n    // eslint-disable-next-line no-console\n    console.warn('This file uses an 8-bit offset which is currently not supported by ExifReader. Contact the maintainer to get it fixed.');\n    return get64BitValue(dataView, offset);\n  }\n  return 0;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}