{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport Types from './types.js';\nexport default {\n  read\n};\nconst IMAGE_WIDTH_OFFSET = 4;\nconst IMAGE_HEIGHT_OFFSET = 7;\n\n// https://developers.google.com/speed/webp/docs/riff_container#extended_file_format\nfunction read(dataView, chunkOffset) {\n  const tags = {};\n  const flags = Types.getByteAt(dataView, chunkOffset);\n  tags['Alpha'] = getAlpha(flags);\n  tags['Animation'] = getAnimation(flags);\n  tags['ImageWidth'] = getThreeByteValue(dataView, chunkOffset + IMAGE_WIDTH_OFFSET);\n  tags['ImageHeight'] = getThreeByteValue(dataView, chunkOffset + IMAGE_HEIGHT_OFFSET);\n  return tags;\n}\nfunction getAlpha(flags) {\n  const value = flags & 0x10;\n  return {\n    value: value ? 1 : 0,\n    description: value ? 'Yes' : 'No'\n  };\n}\nfunction getAnimation(flags) {\n  const value = flags & 0x02;\n  return {\n    value: value ? 1 : 0,\n    description: value ? 'Yes' : 'No'\n  };\n}\nfunction getThreeByteValue(dataView, offset) {\n  // Values are stored little-endian.\n  const value = Types.getByteAt(dataView, offset) + 256 * Types.getByteAt(dataView, offset + 1) + 256 * 256 * Types.getByteAt(dataView, offset + 2) + 1; // Value is 1-based, i.e. a value of 7 means 8px.\n\n  return {\n    value,\n    description: value + 'px'\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}