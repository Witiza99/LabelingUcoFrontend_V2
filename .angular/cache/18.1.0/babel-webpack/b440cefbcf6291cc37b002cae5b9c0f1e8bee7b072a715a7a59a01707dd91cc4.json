{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport Types from './types.js';\nimport { PNG_CHUNK_LENGTH_OFFSET, PNG_CHUNK_TYPE_OFFSET, PNG_CHUNK_DATA_OFFSET, PNG_CHUNK_TYPE_SIZE, TYPE_PHYS, TYPE_TIME } from './image-header-png.js';\nimport { getStringFromDataView } from './utils.js';\nexport default {\n  read\n};\nfunction read(dataView, chunkOffsets) {\n  const tags = {};\n  for (let i = 0; i < chunkOffsets.length; i++) {\n    const chunkLength = Types.getLongAt(dataView, chunkOffsets[i] + PNG_CHUNK_LENGTH_OFFSET);\n    const chunkType = getStringFromDataView(dataView, chunkOffsets[i] + PNG_CHUNK_TYPE_OFFSET, PNG_CHUNK_TYPE_SIZE);\n    if (chunkType === TYPE_PHYS) {\n      tags['Pixels Per Unit X'] = getPixelsPerUnitX(dataView, chunkOffsets[i], chunkLength);\n      tags['Pixels Per Unit Y'] = getPixelsPerUnitY(dataView, chunkOffsets[i], chunkLength);\n      tags['Pixel Units'] = getPixelUnits(dataView, chunkOffsets[i], chunkLength);\n    } else if (chunkType === TYPE_TIME) {\n      tags['Modify Date'] = getModifyDate(dataView, chunkOffsets[i], chunkLength);\n    }\n  }\n  return tags;\n}\nfunction getPixelsPerUnitX(dataView, chunkOffset, chunkLength) {\n  const TAG_OFFSET = 0;\n  const TAG_SIZE = 4;\n  if (!tagFitsInBuffer(dataView, chunkOffset, chunkLength, TAG_OFFSET, TAG_SIZE)) {\n    return undefined;\n  }\n  const value = Types.getLongAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + TAG_OFFSET);\n  return {\n    value,\n    description: '' + value\n  };\n}\nfunction getPixelsPerUnitY(dataView, chunkOffset, chunkLength) {\n  const TAG_OFFSET = 4;\n  const TAG_SIZE = 4;\n  if (!tagFitsInBuffer(dataView, chunkOffset, chunkLength, TAG_OFFSET, TAG_SIZE)) {\n    return undefined;\n  }\n  const value = Types.getLongAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + TAG_OFFSET);\n  return {\n    value,\n    description: '' + value\n  };\n}\nfunction getPixelUnits(dataView, chunkOffset, chunkLength) {\n  const TAG_OFFSET = 8;\n  const TAG_SIZE = 1;\n  if (!tagFitsInBuffer(dataView, chunkOffset, chunkLength, TAG_OFFSET, TAG_SIZE)) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + TAG_OFFSET);\n  return {\n    value,\n    description: value === 1 ? 'meters' : 'Unknown'\n  };\n}\nfunction getModifyDate(dataView, chunkOffset, chunkLength) {\n  const TIME_TAG_SIZE = 7;\n  if (!tagFitsInBuffer(dataView, chunkOffset, chunkLength, 0, TIME_TAG_SIZE)) {\n    return undefined;\n  }\n  const year = Types.getShortAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET);\n  const month = Types.getByteAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + 2);\n  const day = Types.getByteAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + 3);\n  const hours = Types.getByteAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + 4);\n  const minutes = Types.getByteAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + 5);\n  const seconds = Types.getByteAt(dataView, chunkOffset + PNG_CHUNK_DATA_OFFSET + 6);\n  return {\n    value: [year, month, day, hours, minutes, seconds],\n    description: `${pad(year, 4)}-${pad(month, 2)}-${pad(day, 2)} ${pad(hours, 2)}:${pad(minutes, 2)}:${pad(seconds, 2)}`\n  };\n}\nfunction tagFitsInBuffer(dataView, chunkOffset, chunkLength, tagOffset, tagSize) {\n  return tagOffset + tagSize <= chunkLength && chunkOffset + PNG_CHUNK_DATA_OFFSET + tagOffset + tagSize <= dataView.byteLength;\n}\nfunction pad(number, size) {\n  return `${'0'.repeat(size - ('' + number).length)}${number}`;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}