{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport TagNamesCommon from './tag-names-common.js';\nexport default {\n  'tiff:Orientation'(value) {\n    if (value === '1') {\n      return 'Horizontal (normal)';\n    }\n    if (value === '2') {\n      return 'Mirror horizontal';\n    }\n    if (value === '3') {\n      return 'Rotate 180';\n    }\n    if (value === '4') {\n      return 'Mirror vertical';\n    }\n    if (value === '5') {\n      return 'Mirror horizontal and rotate 270 CW';\n    }\n    if (value === '6') {\n      return 'Rotate 90 CW';\n    }\n    if (value === '7') {\n      return 'Mirror horizontal and rotate 90 CW';\n    }\n    if (value === '8') {\n      return 'Rotate 270 CW';\n    }\n    return value;\n  },\n  'tiff:ResolutionUnit': value => TagNamesCommon.ResolutionUnit(parseInt(value, 10)),\n  'tiff:XResolution': value => fraction(TagNamesCommon.XResolution, value),\n  'tiff:YResolution': value => fraction(TagNamesCommon.YResolution, value),\n  'exif:ApertureValue': value => fraction(TagNamesCommon.ApertureValue, value),\n  'exif:GPSLatitude': calculateGPSValue,\n  'exif:GPSLongitude': calculateGPSValue,\n  'exif:FNumber': value => fraction(TagNamesCommon.FNumber, value),\n  'exif:FocalLength': value => fraction(TagNamesCommon.FocalLength, value),\n  'exif:FocalPlaneResolutionUnit': value => TagNamesCommon.FocalPlaneResolutionUnit(parseInt(value, 10)),\n  'exif:ColorSpace': value => TagNamesCommon.ColorSpace(parseNumber(value)),\n  'exif:ComponentsConfiguration'(value, description) {\n    if (/^\\d, \\d, \\d, \\d$/.test(description)) {\n      const numbers = description.split(', ').map(number => number.charCodeAt(0));\n      return TagNamesCommon.ComponentsConfiguration(numbers);\n    }\n    return description;\n  },\n  'exif:Contrast': value => TagNamesCommon.Contrast(parseInt(value, 10)),\n  'exif:CustomRendered': value => TagNamesCommon.CustomRendered(parseInt(value, 10)),\n  'exif:ExposureMode': value => TagNamesCommon.ExposureMode(parseInt(value, 10)),\n  'exif:ExposureProgram': value => TagNamesCommon.ExposureProgram(parseInt(value, 10)),\n  'exif:ExposureTime'(value) {\n    if (isFraction(value)) {\n      return TagNamesCommon.ExposureTime(value.split('/').map(number => parseInt(number, 10)));\n    }\n    return value;\n  },\n  'exif:MeteringMode': value => TagNamesCommon.MeteringMode(parseInt(value, 10)),\n  'exif:Saturation': value => TagNamesCommon.Saturation(parseInt(value, 10)),\n  'exif:SceneCaptureType': value => TagNamesCommon.SceneCaptureType(parseInt(value, 10)),\n  'exif:Sharpness': value => TagNamesCommon.Sharpness(parseInt(value, 10)),\n  'exif:ShutterSpeedValue': value => fraction(TagNamesCommon.ShutterSpeedValue, value),\n  'exif:WhiteBalance': value => TagNamesCommon.WhiteBalance(parseInt(value, 10))\n};\nfunction fraction(func, value) {\n  if (isFraction(value)) {\n    return func(value.split('/'));\n  }\n  return value;\n}\nfunction parseNumber(value) {\n  if (value.substring(0, 2) === '0x') {\n    return parseInt(value.substring(2), 16);\n  }\n  return parseInt(value, 10);\n}\nfunction isFraction(value) {\n  return /^-?\\d+\\/-?\\d+$/.test(value);\n}\nfunction calculateGPSValue(value) {\n  const [degreesString, minutesString] = value.split(',');\n  if (degreesString !== undefined && minutesString !== undefined) {\n    const degrees = parseFloat(degreesString);\n    const minutes = parseFloat(minutesString);\n    const ref = minutesString.charAt(minutesString.length - 1);\n    if (!Number.isNaN(degrees) && !Number.isNaN(minutes)) {\n      return '' + (degrees + minutes / 60) + ref;\n    }\n  }\n  return value;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}