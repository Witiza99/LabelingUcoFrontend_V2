{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { getEncodedString, getCalculatedGpsValue } from './tag-names-utils.js';\nexport default {\n  0x0000: {\n    'name': 'GPSVersionID',\n    'description': value => {\n      if (value[0] === 2 && value[1] === 2 && value[2] === 0 && value[3] === 0) {\n        return 'Version 2.2';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0001: {\n    'name': 'GPSLatitudeRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'N') {\n        return 'North latitude';\n      } else if (ref === 'S') {\n        return 'South latitude';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0002: {\n    'name': 'GPSLatitude',\n    'description': getCalculatedGpsValue\n  },\n  0x0003: {\n    'name': 'GPSLongitudeRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'E') {\n        return 'East longitude';\n      } else if (ref === 'W') {\n        return 'West longitude';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0004: {\n    'name': 'GPSLongitude',\n    'description': getCalculatedGpsValue\n  },\n  0x0005: {\n    'name': 'GPSAltitudeRef',\n    'description': value => {\n      if (value === 0) {\n        return 'Sea level';\n      } else if (value === 1) {\n        return 'Sea level reference (negative value)';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0006: {\n    'name': 'GPSAltitude',\n    'description': value => {\n      return value[0] / value[1] + ' m';\n    }\n  },\n  0x0007: {\n    'name': 'GPSTimeStamp',\n    'description': values => {\n      return values.map(([numerator, denominator]) => {\n        const num = numerator / denominator;\n        if (/^\\d(\\.|$)/.test(`${num}`)) {\n          return `0${num}`;\n        }\n        return num;\n      }).join(':');\n    }\n  },\n  0x0008: 'GPSSatellites',\n  0x0009: {\n    'name': 'GPSStatus',\n    'description': value => {\n      const status = value.join('');\n      if (status === 'A') {\n        return 'Measurement in progress';\n      } else if (status === 'V') {\n        return 'Measurement Interoperability';\n      }\n      return 'Unknown';\n    }\n  },\n  0x000a: {\n    'name': 'GPSMeasureMode',\n    'description': value => {\n      const mode = value.join('');\n      if (mode === '2') {\n        return '2-dimensional measurement';\n      } else if (mode === '3') {\n        return '3-dimensional measurement';\n      }\n      return 'Unknown';\n    }\n  },\n  0x000b: 'GPSDOP',\n  0x000c: {\n    'name': 'GPSSpeedRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'K') {\n        return 'Kilometers per hour';\n      } else if (ref === 'M') {\n        return 'Miles per hour';\n      } else if (ref === 'N') {\n        return 'Knots';\n      }\n      return 'Unknown';\n    }\n  },\n  0x000d: 'GPSSpeed',\n  0x000e: {\n    'name': 'GPSTrackRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'T') {\n        return 'True direction';\n      } else if (ref === 'M') {\n        return 'Magnetic direction';\n      }\n      return 'Unknown';\n    }\n  },\n  0x000f: 'GPSTrack',\n  0x0010: {\n    'name': 'GPSImgDirectionRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'T') {\n        return 'True direction';\n      } else if (ref === 'M') {\n        return 'Magnetic direction';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0011: 'GPSImgDirection',\n  0x0012: 'GPSMapDatum',\n  0x0013: {\n    'name': 'GPSDestLatitudeRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'N') {\n        return 'North latitude';\n      } else if (ref === 'S') {\n        return 'South latitude';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0014: {\n    'name': 'GPSDestLatitude',\n    'description': value => {\n      return value[0][0] / value[0][1] + value[1][0] / value[1][1] / 60 + value[2][0] / value[2][1] / 3600;\n    }\n  },\n  0x0015: {\n    'name': 'GPSDestLongitudeRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'E') {\n        return 'East longitude';\n      } else if (ref === 'W') {\n        return 'West longitude';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0016: {\n    'name': 'GPSDestLongitude',\n    'description': value => {\n      return value[0][0] / value[0][1] + value[1][0] / value[1][1] / 60 + value[2][0] / value[2][1] / 3600;\n    }\n  },\n  0x0017: {\n    'name': 'GPSDestBearingRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'T') {\n        return 'True direction';\n      } else if (ref === 'M') {\n        return 'Magnetic direction';\n      }\n      return 'Unknown';\n    }\n  },\n  0x0018: 'GPSDestBearing',\n  0x0019: {\n    'name': 'GPSDestDistanceRef',\n    'description': value => {\n      const ref = value.join('');\n      if (ref === 'K') {\n        return 'Kilometers';\n      } else if (ref === 'M') {\n        return 'Miles';\n      } else if (ref === 'N') {\n        return 'Knots';\n      }\n      return 'Unknown';\n    }\n  },\n  0x001a: 'GPSDestDistance',\n  0x001b: {\n    'name': 'GPSProcessingMethod',\n    'description': getEncodedString\n  },\n  0x001c: {\n    'name': 'GPSAreaInformation',\n    'description': getEncodedString\n  },\n  0x001d: 'GPSDateStamp',\n  0x001e: {\n    'name': 'GPSDifferential',\n    'description': value => {\n      if (value === 0) {\n        return 'Measurement without differential correction';\n      } else if (value === 1) {\n        return 'Differential correction applied';\n      }\n      return 'Unknown';\n    }\n  },\n  0x001f: 'GPSHPositioningError'\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}