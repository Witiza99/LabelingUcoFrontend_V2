{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n// Specification: https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/\n\nimport { getDataView, getStringFromDataView, getPascalStringFromDataView } from './utils.js';\nimport Types from './types.js';\nimport TagNames from './photoshop-tag-names.js';\nexport default {\n  read\n};\nconst SIGNATURE = '8BIM';\nconst TAG_ID_SIZE = 2;\nconst RESOURCE_LENGTH_SIZE = 4;\nconst SIGNATURE_SIZE = SIGNATURE.length;\nfunction read(bytes, includeUnknown) {\n  const dataView = getDataView(new Uint8Array(bytes).buffer);\n  const tags = {};\n  let offset = 0;\n  while (offset < bytes.length) {\n    const signature = getStringFromDataView(dataView, offset, SIGNATURE_SIZE);\n    offset += SIGNATURE_SIZE;\n    const tagId = Types.getShortAt(dataView, offset);\n    offset += TAG_ID_SIZE;\n    const {\n      tagName,\n      tagNameSize\n    } = getTagName(dataView, offset);\n    offset += tagNameSize;\n    const resourceSize = Types.getLongAt(dataView, offset);\n    offset += RESOURCE_LENGTH_SIZE;\n    if (signature === SIGNATURE) {\n      const valueDataView = getDataView(dataView.buffer, offset, resourceSize);\n      const tag = {\n        id: tagId,\n        value: getStringFromDataView(valueDataView, 0, resourceSize)\n      };\n      if (TagNames[tagId]) {\n        try {\n          tag.description = TagNames[tagId].description(valueDataView);\n        } catch (error) {\n          tag.description = '<no description formatter>';\n        }\n        tags[tagName ? tagName : TagNames[tagId].name] = tag;\n      } else if (includeUnknown) {\n        tags[`undefined-${tagId}`] = tag;\n      }\n    }\n    offset += resourceSize + resourceSize % 2;\n  }\n  return tags;\n}\nfunction getTagName(dataView, offset) {\n  // The name is encoded as a Pascal string (the string is prefixed with one\n  // byte containing the length of the string) and everything is padded with a\n  // null byte to make the size even.\n  const [stringSize, string] = getPascalStringFromDataView(dataView, offset);\n  return {\n    tagName: string,\n    tagNameSize: 1 + stringSize + (stringSize % 2 === 0 ? 1 : 0)\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}