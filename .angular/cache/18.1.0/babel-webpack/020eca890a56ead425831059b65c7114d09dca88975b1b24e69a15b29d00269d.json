{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport Types from './types.js';\nexport default {\n  read\n};\nfunction read(dataView, fileDataOffset) {\n  return {\n    'Image Width': getImageWidth(dataView, fileDataOffset),\n    'Image Height': getImageHeight(dataView, fileDataOffset),\n    'Bit Depth': getBitDepth(dataView, fileDataOffset),\n    'Color Type': getColorType(dataView, fileDataOffset),\n    'Compression': getCompression(dataView, fileDataOffset),\n    'Filter': getFilter(dataView, fileDataOffset),\n    'Interlace': getInterlace(dataView, fileDataOffset)\n  };\n}\nfunction getImageWidth(dataView, fileDataOffset) {\n  const OFFSET = 0;\n  const SIZE = 4;\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getLongAt(dataView, fileDataOffset);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getImageHeight(dataView, fileDataOffset) {\n  const OFFSET = 4;\n  const SIZE = 4;\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getLongAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getBitDepth(dataView, fileDataOffset) {\n  const OFFSET = 8;\n  const SIZE = 1;\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: `${value}`\n  };\n}\nfunction getColorType(dataView, fileDataOffset) {\n  const OFFSET = 9;\n  const SIZE = 1;\n  const COLOR_TYPES = {\n    0: 'Grayscale',\n    2: 'RGB',\n    3: 'Palette',\n    4: 'Grayscale with Alpha',\n    6: 'RGB with Alpha'\n  };\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: COLOR_TYPES[value] || 'Unknown'\n  };\n}\nfunction getCompression(dataView, fileDataOffset) {\n  const OFFSET = 10;\n  const SIZE = 1;\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: value === 0 ? 'Deflate/Inflate' : 'Unknown'\n  };\n}\nfunction getFilter(dataView, fileDataOffset) {\n  const OFFSET = 11;\n  const SIZE = 1;\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: value === 0 ? 'Adaptive' : 'Unknown'\n  };\n}\nfunction getInterlace(dataView, fileDataOffset) {\n  const OFFSET = 12;\n  const SIZE = 1;\n  const INTERLACE_TYPES = {\n    0: 'Noninterlaced',\n    1: 'Adam7 Interlace'\n  };\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: INTERLACE_TYPES[value] || 'Unknown'\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}