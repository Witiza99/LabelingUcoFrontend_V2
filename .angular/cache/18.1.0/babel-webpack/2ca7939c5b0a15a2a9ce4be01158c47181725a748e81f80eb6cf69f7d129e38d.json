{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n// https://www.w3.org/Graphics/GIF/spec-gif87.txt\n// https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n\nimport { getStringFromDataView } from './utils.js';\nexport default {\n  read\n};\nfunction read(dataView) {\n  return {\n    'GIF Version': getGifVersion(dataView),\n    'Image Width': getImageWidth(dataView),\n    'Image Height': getImageHeight(dataView),\n    'Global Color Map': getGlobalColorMap(dataView),\n    'Bits Per Pixel': getBitDepth(dataView),\n    'Color Resolution Depth': getColorResolution(dataView)\n  };\n}\nfunction getGifVersion(dataView) {\n  const OFFSET = 3;\n  const SIZE = 3;\n  if (OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = getStringFromDataView(dataView, OFFSET, SIZE);\n  return {\n    value,\n    description: value\n  };\n}\nfunction getImageWidth(dataView) {\n  const OFFSET = 6;\n  const SIZE = 2;\n  if (OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = dataView.getUint16(OFFSET, true);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getImageHeight(dataView) {\n  const OFFSET = 8;\n  const SIZE = 2;\n  if (OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const value = dataView.getUint16(OFFSET, true);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getGlobalColorMap(dataView) {\n  const OFFSET = 10;\n  const SIZE = 1;\n  if (OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const byteValue = dataView.getUint8(OFFSET);\n  const value = (byteValue & 0b10000000) >>> 7;\n  return {\n    value,\n    description: value === 1 ? 'Yes' : 'No'\n  };\n}\nfunction getColorResolution(dataView) {\n  const OFFSET = 10;\n  const SIZE = 1;\n  if (OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const byteValue = dataView.getUint8(OFFSET);\n  const value = ((byteValue & 0b01110000) >>> 4) + 1; // Zero-based.\n  return {\n    value,\n    description: `${value} ${value === 1 ? 'bit' : 'bits'}`\n  };\n}\nfunction getBitDepth(dataView) {\n  const OFFSET = 10;\n  const SIZE = 1;\n  if (OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n  const byteValue = dataView.getUint8(OFFSET);\n  const value = (byteValue & 0b00000111) + 1; // Zero-based.\n  return {\n    value,\n    description: `${value} ${value === 1 ? 'bit' : 'bits'}`\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}