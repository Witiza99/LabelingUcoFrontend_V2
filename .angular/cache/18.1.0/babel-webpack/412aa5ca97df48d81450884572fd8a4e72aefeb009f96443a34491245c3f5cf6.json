{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { getStringValue, getEncodedString } from './tag-names-utils.js';\nimport TagNamesCommon from './tag-names-common.js';\nexport default {\n  0x829a: {\n    'name': 'ExposureTime',\n    'description': TagNamesCommon.ExposureTime\n  },\n  0x829d: {\n    'name': 'FNumber',\n    'description': TagNamesCommon.FNumber\n  },\n  0x8822: {\n    'name': 'ExposureProgram',\n    'description': TagNamesCommon.ExposureProgram\n  },\n  0x8824: 'SpectralSensitivity',\n  0x8827: 'ISOSpeedRatings',\n  0x8828: {\n    'name': 'OECF',\n    'description': () => '[Raw OECF table data]'\n  },\n  0x882a: 'TimeZoneOffset',\n  0x882b: 'SelfTimerMode',\n  0x8830: {\n    name: 'SensitivityType',\n    description: value => ({\n      1: 'Standard Output Sensitivity',\n      2: 'Recommended Exposure Index',\n      3: 'ISO Speed',\n      4: 'Standard Output Sensitivity and Recommended Exposure Index',\n      5: 'Standard Output Sensitivity and ISO Speed',\n      6: 'Recommended Exposure Index and ISO Speed',\n      7: 'Standard Output Sensitivity, Recommended Exposure Index and ISO Speed'\n    })[value] || 'Unknown'\n  },\n  0x8831: 'StandardOutputSensitivity',\n  0x8832: 'RecommendedExposureIndex',\n  0x8833: 'ISOSpeed',\n  0x8834: 'ISOSpeedLatitudeyyy',\n  0x8835: 'ISOSpeedLatitudezzz',\n  0x9000: {\n    'name': 'ExifVersion',\n    'description': value => getStringValue(value)\n  },\n  0x9003: 'DateTimeOriginal',\n  0x9004: 'DateTimeDigitized',\n  0x9009: 'GooglePlusUploadCode',\n  0x9010: 'OffsetTime',\n  0x9011: 'OffsetTimeOriginal',\n  0x9012: 'OffsetTimeDigitized',\n  0x9101: {\n    'name': 'ComponentsConfiguration',\n    'description': TagNamesCommon.ComponentsConfiguration\n  },\n  0x9102: 'CompressedBitsPerPixel',\n  0x9201: {\n    'name': 'ShutterSpeedValue',\n    'description': TagNamesCommon.ShutterSpeedValue\n  },\n  0x9202: {\n    'name': 'ApertureValue',\n    'description': TagNamesCommon.ApertureValue\n  },\n  0x9203: 'BrightnessValue',\n  0x9204: 'ExposureBiasValue',\n  0x9205: {\n    'name': 'MaxApertureValue',\n    'description': value => {\n      return Math.pow(Math.sqrt(2), value[0] / value[1]).toFixed(2);\n    }\n  },\n  0x9206: {\n    'name': 'SubjectDistance',\n    'description': value => value[0] / value[1] + ' m'\n  },\n  0x9207: {\n    'name': 'MeteringMode',\n    'description': TagNamesCommon.MeteringMode\n  },\n  0x9208: {\n    'name': 'LightSource',\n    description: TagNamesCommon.LightSource\n  },\n  0x9209: {\n    'name': 'Flash',\n    'description': value => {\n      if (value === 0x00) {\n        return 'Flash did not fire';\n      } else if (value === 0x01) {\n        return 'Flash fired';\n      } else if (value === 0x05) {\n        return 'Strobe return light not detected';\n      } else if (value === 0x07) {\n        return 'Strobe return light detected';\n      } else if (value === 0x09) {\n        return 'Flash fired, compulsory flash mode';\n      } else if (value === 0x0d) {\n        return 'Flash fired, compulsory flash mode, return light not detected';\n      } else if (value === 0x0f) {\n        return 'Flash fired, compulsory flash mode, return light detected';\n      } else if (value === 0x10) {\n        return 'Flash did not fire, compulsory flash mode';\n      } else if (value === 0x18) {\n        return 'Flash did not fire, auto mode';\n      } else if (value === 0x19) {\n        return 'Flash fired, auto mode';\n      } else if (value === 0x1d) {\n        return 'Flash fired, auto mode, return light not detected';\n      } else if (value === 0x1f) {\n        return 'Flash fired, auto mode, return light detected';\n      } else if (value === 0x20) {\n        return 'No flash function';\n      } else if (value === 0x41) {\n        return 'Flash fired, red-eye reduction mode';\n      } else if (value === 0x45) {\n        return 'Flash fired, red-eye reduction mode, return light not detected';\n      } else if (value === 0x47) {\n        return 'Flash fired, red-eye reduction mode, return light detected';\n      } else if (value === 0x49) {\n        return 'Flash fired, compulsory flash mode, red-eye reduction mode';\n      } else if (value === 0x4d) {\n        return 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected';\n      } else if (value === 0x4f) {\n        return 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected';\n      } else if (value === 0x59) {\n        return 'Flash fired, auto mode, red-eye reduction mode';\n      } else if (value === 0x5d) {\n        return 'Flash fired, auto mode, return light not detected, red-eye reduction mode';\n      } else if (value === 0x5f) {\n        return 'Flash fired, auto mode, return light detected, red-eye reduction mode';\n      }\n      return 'Unknown';\n    }\n  },\n  0x920a: {\n    'name': 'FocalLength',\n    'description': TagNamesCommon.FocalLength\n  },\n  0x9211: 'ImageNumber',\n  0x9212: {\n    name: 'SecurityClassification',\n    description: value => ({\n      'C': 'Confidential',\n      'R': 'Restricted',\n      'S': 'Secret',\n      'T': 'Top Secret',\n      'U': 'Unclassified'\n    })[value] || 'Unknown'\n  },\n  0x9213: 'ImageHistory',\n  0x9214: {\n    'name': 'SubjectArea',\n    'description': value => {\n      if (value.length === 2) {\n        return `Location; X: ${value[0]}, Y: ${value[1]}`;\n      } else if (value.length === 3) {\n        return `Circle; X: ${value[0]}, Y: ${value[1]}, diameter: ${value[2]}`;\n      } else if (value.length === 4) {\n        return `Rectangle; X: ${value[0]}, Y: ${value[1]}, width: ${value[2]}, height: ${value[3]}`;\n      }\n      return 'Unknown';\n    }\n  },\n  0x927c: {\n    'name': 'MakerNote',\n    'description': () => '[Raw maker note data]'\n  },\n  0x9286: {\n    'name': 'UserComment',\n    'description': getEncodedString\n  },\n  0x9290: 'SubSecTime',\n  0x9291: 'SubSecTimeOriginal',\n  0x9292: 'SubSecTimeDigitized',\n  0x935c: 'ImageSourceData',\n  0x9400: {\n    'name': 'AmbientTemperature',\n    'description': value => value[0] / value[1] + ' °C'\n  },\n  0x9401: {\n    'name': 'Humidity',\n    'description': value => value[0] / value[1] + ' %'\n  },\n  0x9402: {\n    'name': 'Pressure',\n    'description': value => value[0] / value[1] + ' hPa'\n  },\n  0x9403: {\n    'name': 'WaterDepth',\n    'description': value => value[0] / value[1] + ' m'\n  },\n  0x9404: {\n    'name': 'Acceleration',\n    'description': value => value[0] / value[1] + ' mGal'\n  },\n  0x9405: {\n    'name': 'CameraElevationAngle',\n    'description': value => value[0] / value[1] + ' °'\n  },\n  0xa000: {\n    'name': 'FlashpixVersion',\n    'description': value => value.map(charCode => String.fromCharCode(charCode)).join('')\n  },\n  0xa001: {\n    'name': 'ColorSpace',\n    'description': TagNamesCommon.ColorSpace\n  },\n  0xa002: 'PixelXDimension',\n  0xa003: 'PixelYDimension',\n  0xa004: 'RelatedSoundFile',\n  0xa005: 'Interoperability IFD Pointer',\n  0xa20b: 'FlashEnergy',\n  0xa20c: {\n    'name': 'SpatialFrequencyResponse',\n    'description': () => '[Raw SFR table data]'\n  },\n  0xa20e: 'FocalPlaneXResolution',\n  0xa20f: 'FocalPlaneYResolution',\n  0xa210: {\n    'name': 'FocalPlaneResolutionUnit',\n    'description': TagNamesCommon.FocalPlaneResolutionUnit\n  },\n  0xa214: {\n    'name': 'SubjectLocation',\n    'description': ([x, y]) => `X: ${x}, Y: ${y}`\n  },\n  0xa215: 'ExposureIndex',\n  0xa217: {\n    'name': 'SensingMethod',\n    'description': value => {\n      if (value === 1) {\n        return 'Undefined';\n      } else if (value === 2) {\n        return 'One-chip color area sensor';\n      } else if (value === 3) {\n        return 'Two-chip color area sensor';\n      } else if (value === 4) {\n        return 'Three-chip color area sensor';\n      } else if (value === 5) {\n        return 'Color sequential area sensor';\n      } else if (value === 7) {\n        return 'Trilinear sensor';\n      } else if (value === 8) {\n        return 'Color sequential linear sensor';\n      }\n      return 'Unknown';\n    }\n  },\n  0xa300: {\n    'name': 'FileSource',\n    'description': value => {\n      if (value === 3) {\n        return 'DSC';\n      }\n      return 'Unknown';\n    }\n  },\n  0xa301: {\n    'name': 'SceneType',\n    'description': value => {\n      if (value === 1) {\n        return 'A directly photographed image';\n      }\n      return 'Unknown';\n    }\n  },\n  0xa302: {\n    'name': 'CFAPattern',\n    'description': () => '[Raw CFA pattern table data]'\n  },\n  0xa401: {\n    'name': 'CustomRendered',\n    'description': TagNamesCommon.CustomRendered\n  },\n  0xa402: {\n    'name': 'ExposureMode',\n    'description': TagNamesCommon.ExposureMode\n  },\n  0xa403: {\n    'name': 'WhiteBalance',\n    'description': TagNamesCommon.WhiteBalance\n  },\n  0xa404: {\n    'name': 'DigitalZoomRatio',\n    'description': value => {\n      if (value[0] === 0) {\n        return 'Digital zoom was not used';\n      }\n      return '' + value[0] / value[1];\n    }\n  },\n  0xa405: {\n    'name': 'FocalLengthIn35mmFilm',\n    'description': value => {\n      if (value === 0) {\n        return 'Unknown';\n      }\n      return value;\n    }\n  },\n  0xa406: {\n    'name': 'SceneCaptureType',\n    'description': TagNamesCommon.SceneCaptureType\n  },\n  0xa407: {\n    'name': 'GainControl',\n    'description': value => {\n      if (value === 0) {\n        return 'None';\n      } else if (value === 1) {\n        return 'Low gain up';\n      } else if (value === 2) {\n        return 'High gain up';\n      } else if (value === 3) {\n        return 'Low gain down';\n      } else if (value === 4) {\n        return 'High gain down';\n      }\n      return 'Unknown';\n    }\n  },\n  0xa408: {\n    'name': 'Contrast',\n    'description': TagNamesCommon.Contrast\n  },\n  0xa409: {\n    'name': 'Saturation',\n    'description': TagNamesCommon.Saturation\n  },\n  0xa40a: {\n    'name': 'Sharpness',\n    'description': TagNamesCommon.Sharpness\n  },\n  0xa40b: {\n    'name': 'DeviceSettingDescription',\n    'description': () => '[Raw device settings table data]'\n  },\n  0xa40c: {\n    'name': 'SubjectDistanceRange',\n    'description': value => {\n      if (value === 1) {\n        return 'Macro';\n      } else if (value === 2) {\n        return 'Close view';\n      } else if (value === 3) {\n        return 'Distant view';\n      }\n      return 'Unknown';\n    }\n  },\n  0xa420: 'ImageUniqueID',\n  0xa430: 'CameraOwnerName',\n  0xa431: 'BodySerialNumber',\n  0xa432: {\n    'name': 'LensSpecification',\n    'description': value => {\n      const focalLengthFrom = parseFloat((value[0][0] / value[0][1]).toFixed(5));\n      const focalLengthTo = parseFloat((value[1][0] / value[1][1]).toFixed(5));\n      const focalLengths = `${focalLengthFrom}-${focalLengthTo} mm`;\n      if (value[3][1] === 0) {\n        return `${focalLengths} f/?`;\n      }\n      const maxAperture = 1 / (value[2][1] / value[2][1] / (value[3][0] / value[3][1]));\n      return `${focalLengths} f/${parseFloat(maxAperture.toFixed(5))}`;\n    }\n  },\n  0xa433: 'LensMake',\n  0xa434: 'LensModel',\n  0xa435: 'LensSerialNumber',\n  0xa460: {\n    name: 'CompositeImage',\n    description: value => ({\n      1: 'Not a Composite Image',\n      2: 'General Composite Image',\n      3: 'Composite Image Captured While Shooting'\n    })[value] || 'Unknown'\n  },\n  0xa461: 'SourceImageNumberOfCompositeImage',\n  0xa462: 'SourceExposureTimesOfCompositeImage',\n  0xa500: 'Gamma',\n  0xea1c: 'Padding',\n  0xea1d: 'OffsetSchema',\n  0xfde8: 'OwnerName',\n  0xfde9: 'SerialNumber',\n  0xfdea: 'Lens',\n  0xfe4c: 'RawFile',\n  0xfe4d: 'Converter',\n  0xfe4e: 'WhiteBalance',\n  0xfe51: 'Exposure',\n  0xfe52: 'Shadows',\n  0xfe53: 'Brightness',\n  0xfe54: 'Contrast',\n  0xfe55: 'Saturation',\n  0xfe56: 'Sharpness',\n  0xfe57: 'Smoothness',\n  0xfe58: 'MoireFilter'\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}