{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nexport default {\n  ApertureValue: value => Math.pow(Math.sqrt(2), value[0] / value[1]).toFixed(2),\n  ColorSpace(value) {\n    if (value === 1) {\n      return 'sRGB';\n    } else if (value === 0xffff) {\n      return 'Uncalibrated';\n    }\n    return 'Unknown';\n  },\n  ComponentsConfiguration(value) {\n    return value.map(character => {\n      if (character === 0x31) {\n        return 'Y';\n      } else if (character === 0x32) {\n        return 'Cb';\n      } else if (character === 0x33) {\n        return 'Cr';\n      } else if (character === 0x34) {\n        return 'R';\n      } else if (character === 0x35) {\n        return 'G';\n      } else if (character === 0x36) {\n        return 'B';\n      }\n    }).join('');\n  },\n  Contrast(value) {\n    if (value === 0) {\n      return 'Normal';\n    } else if (value === 1) {\n      return 'Soft';\n    } else if (value === 2) {\n      return 'Hard';\n    }\n    return 'Unknown';\n  },\n  CustomRendered(value) {\n    if (value === 0) {\n      return 'Normal process';\n    } else if (value === 1) {\n      return 'Custom process';\n    }\n    return 'Unknown';\n  },\n  ExposureMode(value) {\n    if (value === 0) {\n      return 'Auto exposure';\n    } else if (value === 1) {\n      return 'Manual exposure';\n    } else if (value === 2) {\n      return 'Auto bracket';\n    }\n    return 'Unknown';\n  },\n  ExposureProgram(value) {\n    if (value === 0) {\n      return 'Undefined';\n    } else if (value === 1) {\n      return 'Manual';\n    } else if (value === 2) {\n      return 'Normal program';\n    } else if (value === 3) {\n      return 'Aperture priority';\n    } else if (value === 4) {\n      return 'Shutter priority';\n    } else if (value === 5) {\n      return 'Creative program';\n    } else if (value === 6) {\n      return 'Action program';\n    } else if (value === 7) {\n      return 'Portrait mode';\n    } else if (value === 8) {\n      return 'Landscape mode';\n    } else if (value === 9) {\n      return 'Bulb';\n    }\n    return 'Unknown';\n  },\n  ExposureTime(value) {\n    if (value[0] / value[1] > 0.25) {\n      const decimal = value[0] / value[1];\n      if (Number.isInteger(decimal)) {\n        return '' + decimal;\n      }\n      return decimal.toFixed(1);\n    }\n    if (value[0] !== 0) {\n      return `1/${Math.round(value[1] / value[0])}`;\n    }\n    return `0/${value[1]}`;\n  },\n  FNumber: value => `f/${value[0] / value[1]}`,\n  FocalLength: value => value[0] / value[1] + ' mm',\n  FocalPlaneResolutionUnit(value) {\n    if (value === 2) {\n      return 'inches';\n    } else if (value === 3) {\n      return 'centimeters';\n    }\n    return 'Unknown';\n  },\n  LightSource: value => {\n    if (value === 1) {\n      return 'Daylight';\n    } else if (value === 2) {\n      return 'Fluorescent';\n    } else if (value === 3) {\n      return 'Tungsten (incandescent light)';\n    } else if (value === 4) {\n      return 'Flash';\n    } else if (value === 9) {\n      return 'Fine weather';\n    } else if (value === 10) {\n      return 'Cloudy weather';\n    } else if (value === 11) {\n      return 'Shade';\n    } else if (value === 12) {\n      return 'Daylight fluorescent (D 5700 – 7100K)';\n    } else if (value === 13) {\n      return 'Day white fluorescent (N 4600 – 5400K)';\n    } else if (value === 14) {\n      return 'Cool white fluorescent (W 3900 – 4500K)';\n    } else if (value === 15) {\n      return 'White fluorescent (WW 3200 – 3700K)';\n    } else if (value === 17) {\n      return 'Standard light A';\n    } else if (value === 18) {\n      return 'Standard light B';\n    } else if (value === 19) {\n      return 'Standard light C';\n    } else if (value === 20) {\n      return 'D55';\n    } else if (value === 21) {\n      return 'D65';\n    } else if (value === 22) {\n      return 'D75';\n    } else if (value === 23) {\n      return 'D50';\n    } else if (value === 24) {\n      return 'ISO studio tungsten';\n    } else if (value === 255) {\n      return 'Other light source';\n    }\n    return 'Unknown';\n  },\n  MeteringMode(value) {\n    if (value === 1) {\n      return 'Average';\n    } else if (value === 2) {\n      return 'CenterWeightedAverage';\n    } else if (value === 3) {\n      return 'Spot';\n    } else if (value === 4) {\n      return 'MultiSpot';\n    } else if (value === 5) {\n      return 'Pattern';\n    } else if (value === 6) {\n      return 'Partial';\n    } else if (value === 255) {\n      return 'Other';\n    }\n    return 'Unknown';\n  },\n  ResolutionUnit(value) {\n    if (value === 2) {\n      return 'inches';\n    }\n    if (value === 3) {\n      return 'centimeters';\n    }\n    return 'Unknown';\n  },\n  Saturation(value) {\n    if (value === 0) {\n      return 'Normal';\n    } else if (value === 1) {\n      return 'Low saturation';\n    } else if (value === 2) {\n      return 'High saturation';\n    }\n    return 'Unknown';\n  },\n  SceneCaptureType(value) {\n    if (value === 0) {\n      return 'Standard';\n    } else if (value === 1) {\n      return 'Landscape';\n    } else if (value === 2) {\n      return 'Portrait';\n    } else if (value === 3) {\n      return 'Night scene';\n    }\n    return 'Unknown';\n  },\n  Sharpness(value) {\n    if (value === 0) {\n      return 'Normal';\n    } else if (value === 1) {\n      return 'Soft';\n    } else if (value === 2) {\n      return 'Hard';\n    }\n    return 'Unknown';\n  },\n  ShutterSpeedValue(value) {\n    const denominator = Math.pow(2, value[0] / value[1]);\n    if (denominator <= 1) {\n      return `${Math.round(1 / denominator)}`;\n    }\n    return `1/${Math.round(denominator)}`;\n  },\n  WhiteBalance(value) {\n    if (value === 0) {\n      return 'Auto white balance';\n    } else if (value === 1) {\n      return 'Manual white balance';\n    }\n    return 'Unknown';\n  },\n  XResolution: value => '' + Math.round(value[0] / value[1]),\n  YResolution: value => '' + Math.round(value[0] / value[1])\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}