{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { getStringFromDataView } from './utils.js';\nimport Constants from './constants.js';\nexport default {\n  isJpegFile,\n  findJpegOffsets\n};\nconst MIN_JPEG_DATA_BUFFER_LENGTH = 2;\nconst JPEG_ID = 0xffd8;\nconst JPEG_ID_SIZE = 2;\nconst APP_ID_OFFSET = 4;\nconst APP_MARKER_SIZE = 2;\nconst JFIF_DATA_OFFSET = 2; // From start of APP0 marker.\nconst TIFF_HEADER_OFFSET = 10; // From start of APP1 marker.\nconst IPTC_DATA_OFFSET = 18; // From start of APP13 marker.\nconst XMP_DATA_OFFSET = 33; // From start of APP1 marker.\nconst XMP_EXTENDED_DATA_OFFSET = 79; // From start of APP1 marker including GUID, total length, and offset.\nconst APP2_ICC_DATA_OFFSET = 18; // From start of APP2 marker including marker and chunk/chunk total numbers.\nconst MPF_DATA_OFFSET = 8;\nconst APP2_ICC_IDENTIFIER = 'ICC_PROFILE\\0';\nconst ICC_CHUNK_NUMBER_OFFSET = APP_ID_OFFSET + APP2_ICC_IDENTIFIER.length;\nconst ICC_TOTAL_CHUNKS_OFFSET = ICC_CHUNK_NUMBER_OFFSET + 1;\nconst APP2_MPF_IDENTIFIER = 'MPF\\0';\nconst SOF0_MARKER = 0xffc0;\nconst SOF2_MARKER = 0xffc2;\nconst DHT_MARKER = 0xffc4;\nconst DQT_MARKER = 0xffdb;\nconst DRI_MARKER = 0xffdd;\nconst SOS_MARKER = 0xffda;\nconst APP0_MARKER = 0xffe0;\nconst APP1_MARKER = 0xffe1;\nconst APP2_MARKER = 0xffe2;\nconst APP13_MARKER = 0xffed;\nconst APP15_MARKER = 0xffef;\nconst COMMENT_MARKER = 0xfffe;\n\n// Any number of fill bytes can be placed before an app marker. It's actually the first 0xff that is the\n// fill byte and the next 0xff is either another fill byte or the first half of the next app marker.\nconst FILL_BYTE = 0xffff;\nconst APP0_JFIF_IDENTIFIER = 'JFIF';\nconst APP1_EXIF_IDENTIFIER = 'Exif';\nconst APP1_XMP_IDENTIFIER = 'http://ns.adobe.com/xap/1.0/\\x00';\nconst APP1_XMP_EXTENDED_IDENTIFIER = 'http://ns.adobe.com/xmp/extension/\\x00';\nconst APP13_IPTC_IDENTIFIER = 'Photoshop 3.0';\nfunction isJpegFile(dataView) {\n  return !!dataView && dataView.byteLength >= MIN_JPEG_DATA_BUFFER_LENGTH && dataView.getUint16(0) === JPEG_ID;\n}\nfunction findJpegOffsets(dataView) {\n  let appMarkerPosition = JPEG_ID_SIZE;\n  let fieldLength;\n  let sof0DataOffset;\n  let sof2DataOffset;\n  let jfifDataOffset;\n  let tiffHeaderOffset;\n  let iptcDataOffset;\n  let xmpChunks;\n  let iccChunks;\n  let mpfDataOffset;\n  while (appMarkerPosition + APP_ID_OFFSET + 5 <= dataView.byteLength) {\n    if (Constants.USE_FILE && isSOF0Marker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      sof0DataOffset = appMarkerPosition + APP_MARKER_SIZE;\n    } else if (Constants.USE_FILE && isSOF2Marker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      sof2DataOffset = appMarkerPosition + APP_MARKER_SIZE;\n    } else if (Constants.USE_JFIF && isApp0JfifMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      jfifDataOffset = appMarkerPosition + JFIF_DATA_OFFSET;\n    } else if (Constants.USE_EXIF && isApp1ExifMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      tiffHeaderOffset = appMarkerPosition + TIFF_HEADER_OFFSET;\n    } else if (Constants.USE_XMP && isApp1XmpMarker(dataView, appMarkerPosition)) {\n      if (!xmpChunks) {\n        xmpChunks = [];\n      }\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      xmpChunks.push(getXmpChunkDetails(appMarkerPosition, fieldLength));\n    } else if (Constants.USE_XMP && isApp1ExtendedXmpMarker(dataView, appMarkerPosition)) {\n      if (!xmpChunks) {\n        xmpChunks = [];\n      }\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      xmpChunks.push(getExtendedXmpChunkDetails(appMarkerPosition, fieldLength));\n    } else if (Constants.USE_IPTC && isApp13PhotoshopMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      iptcDataOffset = appMarkerPosition + IPTC_DATA_OFFSET;\n    } else if (Constants.USE_ICC && isApp2ICCMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      const iccDataOffset = appMarkerPosition + APP2_ICC_DATA_OFFSET;\n      const iccDataLength = fieldLength - (APP2_ICC_DATA_OFFSET - APP_MARKER_SIZE);\n      const iccChunkNumber = dataView.getUint8(appMarkerPosition + ICC_CHUNK_NUMBER_OFFSET);\n      const iccChunksTotal = dataView.getUint8(appMarkerPosition + ICC_TOTAL_CHUNKS_OFFSET);\n      if (!iccChunks) {\n        iccChunks = [];\n      }\n      iccChunks.push({\n        offset: iccDataOffset,\n        length: iccDataLength,\n        chunkNumber: iccChunkNumber,\n        chunksTotal: iccChunksTotal\n      });\n    } else if (Constants.USE_MPF && isApp2MPFMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      mpfDataOffset = appMarkerPosition + MPF_DATA_OFFSET;\n    } else if (isAppMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n    } else if (isFillByte(dataView, appMarkerPosition)) {\n      appMarkerPosition++;\n      continue;\n    } else {\n      break;\n    }\n    appMarkerPosition += APP_MARKER_SIZE + fieldLength;\n  }\n  return {\n    hasAppMarkers: appMarkerPosition > JPEG_ID_SIZE,\n    fileDataOffset: sof0DataOffset || sof2DataOffset,\n    jfifDataOffset,\n    tiffHeaderOffset,\n    iptcDataOffset,\n    xmpChunks,\n    iccChunks,\n    mpfDataOffset\n  };\n}\nfunction isSOF0Marker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === SOF0_MARKER;\n}\nfunction isSOF2Marker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === SOF2_MARKER;\n}\nfunction isApp2ICCMarker(dataView, appMarkerPosition) {\n  const markerIdLength = APP2_ICC_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP2_MARKER && getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP2_ICC_IDENTIFIER;\n}\nfunction isApp2MPFMarker(dataView, appMarkerPosition) {\n  const markerIdLength = APP2_MPF_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP2_MARKER && getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP2_MPF_IDENTIFIER;\n}\nfunction isApp0JfifMarker(dataView, appMarkerPosition) {\n  const markerIdLength = APP0_JFIF_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP0_MARKER && getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP0_JFIF_IDENTIFIER && dataView.getUint8(appMarkerPosition + APP_ID_OFFSET + markerIdLength) === 0x00;\n}\nfunction isApp1ExifMarker(dataView, appMarkerPosition) {\n  const markerIdLength = APP1_EXIF_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP1_MARKER && getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP1_EXIF_IDENTIFIER && dataView.getUint8(appMarkerPosition + APP_ID_OFFSET + markerIdLength) === 0x00;\n}\nfunction isApp1XmpMarker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === APP1_MARKER && isXmpIdentifier(dataView, appMarkerPosition);\n}\nfunction isXmpIdentifier(dataView, appMarkerPosition) {\n  const markerIdLength = APP1_XMP_IDENTIFIER.length;\n  return getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP1_XMP_IDENTIFIER;\n}\nfunction isApp1ExtendedXmpMarker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === APP1_MARKER && isExtendedXmpIdentifier(dataView, appMarkerPosition);\n}\nfunction isExtendedXmpIdentifier(dataView, appMarkerPosition) {\n  const markerIdLength = APP1_XMP_EXTENDED_IDENTIFIER.length;\n  return getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP1_XMP_EXTENDED_IDENTIFIER;\n}\nfunction getXmpChunkDetails(appMarkerPosition, fieldLength) {\n  return {\n    dataOffset: appMarkerPosition + XMP_DATA_OFFSET,\n    length: fieldLength - (XMP_DATA_OFFSET - APP_MARKER_SIZE)\n  };\n}\nfunction getExtendedXmpChunkDetails(appMarkerPosition, fieldLength) {\n  return {\n    dataOffset: appMarkerPosition + XMP_EXTENDED_DATA_OFFSET,\n    length: fieldLength - (XMP_EXTENDED_DATA_OFFSET - APP_MARKER_SIZE)\n  };\n}\nfunction isApp13PhotoshopMarker(dataView, appMarkerPosition) {\n  const markerIdLength = APP13_IPTC_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP13_MARKER && getStringFromDataView(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP13_IPTC_IDENTIFIER && dataView.getUint8(appMarkerPosition + APP_ID_OFFSET + markerIdLength) === 0x00;\n}\nfunction isAppMarker(dataView, appMarkerPosition) {\n  const appMarker = dataView.getUint16(appMarkerPosition);\n  return appMarker >= APP0_MARKER && appMarker <= APP15_MARKER || appMarker === COMMENT_MARKER || appMarker === SOF0_MARKER || appMarker === SOF2_MARKER || appMarker === DHT_MARKER || appMarker === DQT_MARKER || appMarker === DRI_MARKER || appMarker === SOS_MARKER;\n}\nfunction isFillByte(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === FILL_BYTE;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}