{"ast":null,"code":"import _asyncToGenerator from \"/home/antoniogg/Escritorio/APPLabelingUCO/pruebamia/FrontendLabelingUCO/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*******************************Imports***********************************/\nimport { EventEmitter } from '@angular/core';\nimport * as JSZip from 'jszip';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./service/images.service\";\nimport * as i2 from \"./service/spinner.service\";\nimport * as i3 from \"./service/api-service.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"./components/header/header.component\";\nimport * as i7 from \"./components/toolbar/toolbar.component\";\nimport * as i8 from \"./components/sidebar/sidebar.component\";\nimport * as i9 from \"./components/main-area/main-area.component\";\nfunction AppComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelement(1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_12_ng_container_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"div\", 25)(2, \"span\", 26);\n    i0.ɵɵtext(3, \"File name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 26);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 25)(7, \"span\", 26);\n    i0.ɵɵtext(8, \"Frames per second:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 27);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function AppComponent_div_12_ng_container_4_div_1_Template_input_ngModelChange_9_listener($event) {\n      const fileSettings_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      i0.ɵɵtwoWayBindingSet(fileSettings_r3.captureInterval, $event) || (fileSettings_r3.captureInterval = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 28)(11, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_12_ng_container_4_div_1_Template_button_click_11_listener() {\n      const i_r4 = i0.ɵɵrestoreView(_r2).index;\n      const ctx_r4 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r4.removeFile(i_r4));\n    });\n    i0.ɵɵtext(12, \"Eliminar\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const fileSettings_r3 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(fileSettings_r3.file.name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", fileSettings_r3.captureInterval);\n  }\n}\nfunction AppComponent_div_12_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AppComponent_div_12_ng_container_4_div_1_Template, 13, 2, \"div\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.videoFilesWithSettings);\n  }\n}\nfunction AppComponent_div_12_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\u00BFUpload images only?\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17)(2, \"h2\", 18);\n    i0.ɵɵtext(3, \"Video Settings\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, AppComponent_div_12_ng_container_4_Template, 2, 1, \"ng-container\", 19)(5, AppComponent_div_12_ng_template_5_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(7, \"div\", 20)(8, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_12_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.cancel());\n    });\n    i0.ɵɵtext(9, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_12_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.confirm());\n    });\n    i0.ɵɵtext(11, \"Confirm\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const noVideos_r6 = i0.ɵɵreference(6);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.videoFilesWithSettings.length > 0)(\"ngIfElse\", noVideos_r6);\n  }\n}\n//Class for Main Component APP\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    /*******************************Constructor***********************************/\n    constructor(imageService, spinnerService, apiService) {\n      this.imageService = imageService;\n      this.spinnerService = spinnerService;\n      this.apiService = apiService;\n      /*******************************Decorators***********************************/\n      this.receiveSaveCurrentImagefromAPP = new EventEmitter();\n      this.receiveSaveAllImagesfromAPP = new EventEmitter();\n      /*******************************Variables***********************************/\n      this.showSpinner = false;\n      this.isModalVisible = false;\n      this.frameRate = 1;\n      this.filesFromHeader = [];\n      this.videoFilesWithSettings = [];\n      this.imageToService = [];\n    }\n    /******************************Angular_Functions*******************************/\n    ngOnInit() {\n      this.spinnerService.spinnerState.subscribe(state => {\n        this.showSpinner = state;\n      });\n    }\n    /******************************Handle_Functions*******************************/\n    handleSaveCurrentImage() {\n      this.receiveSaveCurrentImagefromAPP.emit();\n    }\n    handleSaveAllImages() {\n      this.receiveSaveAllImagesfromAPP.emit();\n    }\n    handleFilesUploaded(files) {\n      this.filesFromHeader = files;\n      //Get videos from file array\n      this.videoFilesWithSettings = [];\n      this.imageToService = [];\n      for (let i = 0; i < this.filesFromHeader.length; i++) {\n        const file = this.filesFromHeader[i];\n        if (file.type.startsWith('video/')) {\n          this.videoFilesWithSettings.push({\n            file,\n            captureInterval: 1\n          });\n        } else {\n          this.imageToService.push(file);\n        }\n      }\n      //Show modal to manage videos if there are videos\n      if (this.videoFilesWithSettings.length > 0) {\n        this.showModal();\n      } else {\n        //Call Service to add images\n        this.imageService.addImages(this.imageToService);\n      }\n    }\n    /******************************Others_Functions*******************************/\n    //Show modal to manage videos\n    showModal() {\n      this.isModalVisible = true;\n    }\n    //Remove video file button from modal\n    removeFile(i) {\n      this.videoFilesWithSettings.splice(i, 1);\n      if (this.videoFilesWithSettings.length === 0 && this.imageToService.length === 0) {\n        this.isModalVisible = false;\n      }\n    }\n    //Cancel button from modal\n    cancel() {\n      this.isModalVisible = false;\n    }\n    //Confirm button from modal\n    confirm() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.isModalVisible = false;\n        _this.spinnerService.show();\n        try {\n          console.log(\"Processing video...\");\n          const frames = yield _this.extractFrames(_this.videoFilesWithSettings);\n          console.log(\"Processing video finished\");\n          console.log(frames);\n          //Merge image with image from video\n          _this.imageToService.push(...frames);\n          //Call image service to add new images\n          _this.imageService.addImages(_this.imageToService);\n        } catch (error) {\n          console.error(\"Error processing video frames:\", error);\n        } finally {\n          _this.spinnerService.hide();\n        }\n      })();\n    }\n    //Extract Frames from videoFiles with Framerate\n    extractFrames(videoFilesWithSettings) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const files = videoFilesWithSettings.map(videoFile => videoFile.file);\n          const frameRates = videoFilesWithSettings.map(videoFile => videoFile.captureInterval);\n          //subscribe to api, process all videos with their framerate\n          _this2.apiService.processVideo(files, frameRates).subscribe({\n            next: function () {\n              var _ref = _asyncToGenerator(function* (data) {\n                try {\n                  //Get blob(ZIP file) and extract images\n                  console.log(\"Processing Blob with zip...\");\n                  const imagesFromVideo = yield _this2.extractImagesFromZip(data);\n                  console.log(\"End processing Blob with zip...\");\n                  resolve(imagesFromVideo);\n                } catch (error) {\n                  console.error('Error processing files:', error);\n                  reject(error);\n                }\n              });\n              return function next(_x) {\n                return _ref.apply(this, arguments);\n              };\n            }(),\n            error: error => {\n              console.error('Error calling the API:', error);\n              reject(error);\n            }\n          });\n        });\n      })();\n    }\n    //Get blob (ZIP) and return file[] with all images\n    extractImagesFromZip(zipBlob) {\n      return _asyncToGenerator(function* () {\n        try {\n          // Create instance JSZip y charge File ZIP\n          const zip = yield JSZip.loadAsync(zipBlob);\n          // Array for save all images\n          const extractedFiles = [];\n          // Iterate each files from File ZIP\n          yield Promise.all(Object.keys(zip.files).map( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (fileName) {\n              const zipEntry = zip.files[fileName];\n              // Check if file is a folder or file\n              if (!zipEntry.dir) {\n                // Get file like blob\n                const fileData = yield zipEntry.async('blob');\n                // Create file \n                const file = new File([fileData], zipEntry.name, {\n                  type: fileData.type\n                });\n                // Add file to array for save all images\n                extractedFiles.push(file);\n              }\n            });\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }()));\n          return extractedFiles;\n        } catch (error) {\n          console.error('Error with extract file from ZIP:', error);\n          throw error;\n        }\n      })();\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ImageService), i0.ɵɵdirectiveInject(i2.SpinnerService), i0.ɵɵdirectiveInject(i3.ApiService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      outputs: {\n        receiveSaveCurrentImagefromAPP: \"receiveSaveCurrentImagefromAPP\",\n        receiveSaveAllImagesfromAPP: \"receiveSaveAllImagesfromAPP\"\n      },\n      decls: 13,\n      vars: 4,\n      consts: [[\"noVideos\", \"\"], [1, \"h-screen\", \"flex\", \"flex-col\"], [1, \"h-30\"], [1, \"h-full\", 3, \"imagesUploaded\"], [1, \"flex-1\", \"flex\", \"flex-col\"], [1, \"flex\", \"flex-1\"], [1, \"w-1/6\", \"bg-gray-100\", \"border-r\", \"border-gray-300\", \"overflow-hidden\"], [1, \"h-full\"], [1, \"flex-1\", \"bg-white\", \"p-2\", \"overflow-auto\"], [3, \"receiveSaveCurrentImage\", \"receiveSaveAllImages\"], [1, \"w-1/6\", \"bg-gray-100\", \"border-l\", \"border-gray-300\", \"overflow-hidden\"], [1, \"h-full\", 3, \"saveImageEvent\", \"saveAllImagesEvent\"], [\"class\", \"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\", 4, \"ngIf\"], [\"class\", \"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50\", 4, \"ngIf\"], [1, \"fixed\", \"inset-0\", \"flex\", \"items-center\", \"justify-center\", \"bg-black\", \"bg-opacity-50\", \"z-50\"], [1, \"border-t-4\", \"border-blue-500\", \"rounded-full\", \"w-32\", \"h-32\", \"animate-spin\"], [1, \"fixed\", \"inset-0\", \"flex\", \"items-center\", \"justify-center\", \"bg-gray-800\", \"bg-opacity-50\"], [1, \"bg-white\", \"rounded-lg\", \"shadow-lg\", \"max-w-md\", \"overflow-auto\", 2, \"overflow-y\", \"auto\", \"max-height\", \"65%\"], [1, \"text-lg\", \"font-bold\", \"mb-4\", 2, \"position\", \"sticky\", \"top\", \"0px\", \"background-color\", \"white\", \"padding\", \"15px\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"flex\", \"justify-between\", \"p-4\", \"mt-4\", 2, \"background-color\", \"white\"], [1, \"bg-gray-300\", \"px-4\", \"py-2\", \"rounded\", 3, \"click\"], [1, \"bg-blue-500\", \"text-white\", \"px-4\", \"py-2\", \"rounded\", 3, \"click\"], [\"class\", \"mb-4 border-b pb-4 p-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"mb-4\", \"border-b\", \"pb-4\", \"p-4\"], [1, \"flex\", \"items-center\", \"mb-2\"], [1, \"ml-2\"], [\"type\", \"number\", \"min\", \"1\", \"placeholder\", \"Capture Interval\", 1, \"border\", \"px-2\", \"py-1\", \"rounded\", 3, \"ngModelChange\", \"ngModel\"], [1, \"flex\", \"justify-end\"], [1, \"bg-red-500\", \"text-white\", \"px-4\", \"py-2\", \"rounded\", 3, \"click\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"app-header\", 3);\n          i0.ɵɵlistener(\"imagesUploaded\", function AppComponent_Template_app_header_imagesUploaded_2_listener($event) {\n            return ctx.handleFilesUploaded($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(3, \"div\", 4)(4, \"div\", 5)(5, \"div\", 6);\n          i0.ɵɵelement(6, \"app-toolbar\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 8);\n          i0.ɵɵelement(8, \"app-main-area\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 10)(10, \"app-sidebar\", 11);\n          i0.ɵɵlistener(\"saveImageEvent\", function AppComponent_Template_app_sidebar_saveImageEvent_10_listener() {\n            return ctx.handleSaveCurrentImage();\n          })(\"saveAllImagesEvent\", function AppComponent_Template_app_sidebar_saveAllImagesEvent_10_listener() {\n            return ctx.handleSaveAllImages();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(11, AppComponent_div_11_Template, 2, 0, \"div\", 12)(12, AppComponent_div_12_Template, 12, 2, \"div\", 13);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"receiveSaveCurrentImage\", ctx.receiveSaveCurrentImagefromAPP)(\"receiveSaveAllImages\", ctx.receiveSaveAllImagesfromAPP);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isModalVisible);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.NgControlStatus, i5.MinValidator, i5.NgModel, i6.HeaderComponent, i7.ToolbarComponent, i8.SidebarComponent, i9.MainAreaComponent],\n      encapsulation: 2\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}