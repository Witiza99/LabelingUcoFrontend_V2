{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport Types from './types.js';\nexport default {\n  read\n};\nfunction read(dataView, fileDataOffset) {\n  const length = getLength(dataView, fileDataOffset);\n  const numberOfColorComponents = getNumberOfColorComponents(dataView, fileDataOffset, length);\n  return {\n    'Bits Per Sample': getDataPrecision(dataView, fileDataOffset, length),\n    'Image Height': getImageHeight(dataView, fileDataOffset, length),\n    'Image Width': getImageWidth(dataView, fileDataOffset, length),\n    'Color Components': numberOfColorComponents,\n    'Subsampling': numberOfColorComponents && getSubsampling(dataView, fileDataOffset, numberOfColorComponents.value, length)\n  };\n}\nfunction getLength(dataView, fileDataOffset) {\n  return Types.getShortAt(dataView, fileDataOffset);\n}\nfunction getDataPrecision(dataView, fileDataOffset, length) {\n  const OFFSET = 2;\n  const SIZE = 1;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: '' + value\n  };\n}\nfunction getImageHeight(dataView, fileDataOffset, length) {\n  const OFFSET = 3;\n  const SIZE = 2;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getShortAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getImageWidth(dataView, fileDataOffset, length) {\n  const OFFSET = 5;\n  const SIZE = 2;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getShortAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: `${value}px`\n  };\n}\nfunction getNumberOfColorComponents(dataView, fileDataOffset, length) {\n  const OFFSET = 7;\n  const SIZE = 1;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const value = Types.getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value,\n    description: '' + value\n  };\n}\nfunction getSubsampling(dataView, fileDataOffset, numberOfColorComponents, length) {\n  const OFFSET = 8;\n  const SIZE = 3 * numberOfColorComponents;\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n  const components = [];\n  for (let i = 0; i < numberOfColorComponents; i++) {\n    const componentOffset = fileDataOffset + OFFSET + i * 3;\n    components.push([Types.getByteAt(dataView, componentOffset), Types.getByteAt(dataView, componentOffset + 1), Types.getByteAt(dataView, componentOffset + 2)]);\n  }\n  return {\n    value: components,\n    description: components.length > 1 ? getComponentIds(components) + getSamplingType(components) : ''\n  };\n}\nfunction getComponentIds(components) {\n  const ids = {\n    0x01: 'Y',\n    0x02: 'Cb',\n    0x03: 'Cr',\n    0x04: 'I',\n    0x05: 'Q'\n  };\n  return components.map(compontent => ids[compontent[0]]).join('');\n}\nfunction getSamplingType(components) {\n  const types = {\n    0x11: '4:4:4 (1 1)',\n    0x12: '4:4:0 (1 2)',\n    0x14: '4:4:1 (1 4)',\n    0x21: '4:2:2 (2 1)',\n    0x22: '4:2:0 (2 2)',\n    0x24: '4:2:1 (2 4)',\n    0x41: '4:1:1 (4 1)',\n    0x42: '4:1:0 (4 2)'\n  };\n  if (components.length === 0 || components[0][1] === undefined || types[components[0][1]] === undefined) {\n    return '';\n  }\n  return types[components[0][1]];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}